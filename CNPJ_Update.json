{
  "name": "CNPJ Update",
  "nodes": [
    {
      "parameters": {},
      "id": "2447ac63-c296-4360-8748-de6dd7afedae",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [
        2120,
        -720
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "b611c6dc-064d-4aeb-925c-f3cbfa037ede",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        2120,
        -480
      ]
    },
    {
      "parameters": {
        "databaseId": 147184,
        "tableId": 399378,
        "returnAll": true,
        "additionalOptions": {
          "filters": {
            "fields": [
              {
                "field": 3053136,
                "operator": "not_equal",
                "value": "={{ $json.CNPJ }}"
              }
            ]
          }
        }
      },
      "id": "c0737c26-2838-4a34-8242-03e0833a7648",
      "name": "Get Banco",
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        2560,
        -720
      ],
      "executeOnce": false,
      "credentials": {
        "baserowApi": {
          "id": "p9yT8hD4cKqwhnNl",
          "name": "Baserow account"
        }
      }
    },
    {
      "parameters": {
        "compare": "selectedFields",
        "fieldsToCompare": "CNPJ",
        "options": {
          "removeOtherFields": true
        }
      },
      "id": "45f2f09f-e707-4724-b806-ed3c11cfe193",
      "name": "Remove Duplicatas",
      "type": "n8n-nodes-base.removeDuplicates",
      "typeVersion": 2,
      "position": [
        2820,
        -720
      ]
    },
    {
      "parameters": {
        "html": "<!DOCTYPE html>\n<html lang=\"pt-BR\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Tabela de Dados do Baserow</title>\n\n  <!-- Referência ao CSS do Bootstrap via CDN -->\n  <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-1CmrxMRARb6aLqgBO7uuNG5Hlhj8c5vAAtrmVYb3yywDG7jZhMzO9hKo8sm1Cf2\" crossorigin=\"anonymous\">\n\n  <style>\n    body {\n      margin: 20px;\n      background-color: #f8f9fa;\n      font-family: Arial, sans-serif;\n    }\n    .table-container {\n      max-width: 100%;\n      overflow-x: auto;\n      border: 1px solid #dee2e6;\n      padding: 15px;\n      background: #ffffff;\n      border-radius: 8px;\n      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n    }\n    table {\n      width: 100%;\n      border-collapse: collapse;\n    }\n    th {\n      background-color: #343a40;\n      color: #ffffff;\n      cursor: pointer;\n    }\n    td, th {\n      padding: 8px;\n      text-align: left;\n      border: 1px solid #dee2e6;\n      word-wrap: break-word;\n    }\n    tr:hover {\n      background-color: #f1f3f5;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <h1 class=\"text-center my-4\">Tabela de Dados do Baserow</h1>\n\n    <!-- Container da Tabela -->\n    <div class=\"table-container\">\n      <table class=\"table table-bordered table-striped table-hover\">\n        <thead class=\"table-dark\">\n          <tr id=\"table-header\">\n            <!-- Cabeçalhos serão adicionados dinamicamente -->\n          </tr>\n        </thead>\n        <tbody id=\"table-body\">\n          <!-- Dados serão adicionados dinamicamente -->\n        </tbody>\n      </table>\n      <nav class=\"mt-3\">\n        <ul class=\"pagination justify-content-center\" id=\"pagination\">\n          <!-- Botões de paginação serão adicionados dinamicamente -->\n        </ul>\n      </nav>\n    </div>\n  </div>\n\n  <!-- Referência ao JS do Bootstrap via CDN -->\n  <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+Wj59b6EGGoI1z2E4iAkzBv1WTRi\" crossorigin=\"anonymous\"></script>\n\n  <script>\n    const API_TOKEN = 'sq89QKJFYrDlUVW3r2SCqPx1qVPzeCuh';\n    const TABLE_ID = '399378';\n    const API_URL = `https://api.baserow.io/api/database/rows/table/${TABLE_ID}/?user_field_names=true`;\n    const ROWS_PER_PAGE = 10;\n    let currentPage = 1;\n    let currentRows = [];\n\n    async function fetchData() {\n      try {\n        const response = await fetch(API_URL, {\n          headers: { Authorization: `Token ${API_TOKEN}` }\n        });\n\n        if (!response.ok) {\n          throw new Error('Erro ao buscar dados da API.');\n        }\n\n        const data = await response.json();\n        currentRows = data.results;\n        renderTable();\n        renderPagination();\n      } catch (error) {\n        document.getElementById('table-body').innerHTML = `\n          <tr>\n            <td colspan=\"100%\" class=\"text-center text-danger\">Erro: ${error.message}</td>\n          </tr>`;\n      }\n    }\n\n    function renderTable() {\n      const start = (currentPage - 1) * ROWS_PER_PAGE;\n      const end = start + ROWS_PER_PAGE;\n      const rows = currentRows.slice(start, end);\n\n      if (rows.length === 0) {\n        document.getElementById('table-body').innerHTML = `\n          <tr>\n            <td colspan=\"100%\" class=\"text-center\">Nenhum dado encontrado.</td>\n          </tr>`;\n        return;\n      }\n\n      const headerRow = document.getElementById('table-header');\n      headerRow.innerHTML = '';\n      const fields = Object.keys(rows[0]);\n\n      fields.forEach(field => {\n        const th = document.createElement('th');\n        th.textContent = field;\n        th.onclick = () => sortTable(field);\n        headerRow.appendChild(th);\n      });\n\n      const tableBody = document.getElementById('table-body');\n      tableBody.innerHTML = '';\n      rows.forEach(row => {\n        const tr = document.createElement('tr');\n        fields.forEach(field => {\n          const td = document.createElement('td');\n          td.textContent = row[field];\n          tr.appendChild(td);\n        });\n        tableBody.appendChild(tr);\n      });\n    }\n\n    function renderPagination() {\n      const totalPages = Math.ceil(currentRows.length / ROWS_PER_PAGE);\n      const pagination = document.getElementById('pagination');\n      pagination.innerHTML = '';\n\n      for (let i = 1; i <= totalPages; i++) {\n        const li = document.createElement('li');\n        li.className = `page-item ${i === currentPage ? 'active' : ''}`;\n        li.innerHTML = `<button class=\"page-link\">${i}</button>`;\n        li.onclick = () => {\n          currentPage = i;\n          renderTable();\n          renderPagination();\n        };\n        pagination.appendChild(li);\n      }\n    }\n\n    function sortTable(field) {\n      currentRows.sort((a, b) => {\n        if (a[field] < b[field]) return -1;\n        if (a[field] > b[field]) return 1;\n        return 0;\n      });\n      renderTable();\n    }\n\n    fetchData();\n  </script>\n</body>\n</html>\n"
      },
      "id": "d4404775-5212-4088-bdbc-1febe224bded",
      "name": "HTML",
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        2760,
        -20
      ],
      "disabled": true
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.html }}",
        "options": {}
      },
      "id": "cae7f6c5-d568-4a14-b9e6-7f4d950fa46f",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        3020,
        -20
      ],
      "disabled": true
    },
    {
      "parameters": {
        "path": "html",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "857963da-86c9-479a-b467-101474e8c7b2",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        2500,
        -20
      ],
      "webhookId": "6dd7ccb5-20fc-4ab2-ace8-9adc6182da7e",
      "disabled": true
    },
    {
      "parameters": {
        "operation": "create",
        "databaseId": 147184,
        "tableId": 414784,
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": 3175133,
              "fieldValue": "={{ $json.company.name }}"
            },
            {
              "fieldId": 3175221,
              "fieldValue": "={{ $json.taxId }}"
            },
            {
              "fieldId": 3175222,
              "fieldValue": "={{ $('GET CNPJa').item.json.company.nature.text }}"
            },
            {
              "fieldId": 3175223,
              "fieldValue": "={{ $('GET CNPJa').item.json.company.size.text }}"
            },
            {
              "fieldId": 3175224,
              "fieldValue": "={{ $('GET CNPJa').item.json.status.text }}"
            },
            {
              "fieldId": 3175225,
              "fieldValue": "={{ $('GET CNPJa').item.json.address.street }}, {{ $('GET CNPJa').item.json.address.number }} / {{ $('GET CNPJa').item.json.address.details }}"
            },
            {
              "fieldId": 3175226,
              "fieldValue": "={{ $('GET CNPJa').item.json.address.district }}"
            },
            {
              "fieldId": 3175227,
              "fieldValue": "={{ $('GET CNPJa').item.json.address.city }}"
            },
            {
              "fieldId": 3175228,
              "fieldValue": "={{ $('GET CNPJa').item.json.address.state }}"
            },
            {
              "fieldId": 3175229,
              "fieldValue": "={{ $('GET CNPJa').item.json.address.zip }}"
            },
            {
              "fieldId": 3175232,
              "fieldValue": "={{ $('GET CNPJa').item.json.emails[0].address }}"
            },
            {
              "fieldId": 3175233,
              "fieldValue": "={{ $('GET CNPJa').item.json.emails[0].domain }}"
            },
            {
              "fieldId": 3175220,
              "fieldValue": "={{ $json.updated }}"
            },
            {
              "fieldId": 3175230,
              "fieldValue": "={{ (() => {\n    const phones = $json.phones; // Acesse o array phones\n    const landlinePhone = phones.find(phone => phone.type === 'LANDLINE'); // Encontre o telefone LANDLINE\n    return landlinePhone ? `${landlinePhone.area}${landlinePhone.number}` : null; // Retorne o resultado concatenado ou nulo\n})() }}"
            },
            {
              "fieldId": 3175231,
              "fieldValue": "={{ (() => {\n    const phones = $json.phones; // Acesse o array phones\n    const landlinePhone = phones.find(phone => phone.type === 'MOBILE'); // Encontre o telefone LANDLINE\n    return landlinePhone ? `${landlinePhone.area}${landlinePhone.number}` : null; // Retorne o resultado concatenado ou nulo\n})() }}"
            },
            {
              "fieldId": 3180798,
              "fieldValue": "={{ $json.company.equity }}"
            },
            {
              "fieldId": 3180800,
              "fieldValue": "={{ (() => {\n    // Acessa o array \"members\" dentro de \"company\"\n    const members = $json.company?.members;\n\n    // Verifica se o array \"members\" existe e é válido\n    if (!Array.isArray(members)) {\n        return \"Array 'members' não encontrado ou não é um array.\";\n    }\n\n    // Encontra o membro cujo \"role.text\" seja \"Sócio-Administrador\"\n    const matchingMember = members.find(member => member.role?.text === \"Sócio-Administrador\");\n\n    // Verifica se encontrou um membro correspondente\n    if (matchingMember) {\n        // Pega o valor de \"name\" e \"age\" em \"person\"\n        const personName = matchingMember.person?.name || \"Texto não encontrado\";\n        const personAge = matchingMember.person?.age || \"Idade não encontrada\";\n\n        // Retorna os valores concatenados em uma string\n        return `${personName}`;\n    }\n\n    // Caso nenhum membro seja encontrado\n    return \"Nenhum membro com 'Sócio-Administrador' encontrado.\";\n})() }}\n\n\n\n\n"
            },
            {
              "fieldId": 3180801,
              "fieldValue": "={{ (() => {\n    // Acessa o array \"members\" dentro de \"company\"\n    const members = $json.company?.members;\n\n    // Verifica se o array \"members\" existe e é válido\n    if (!Array.isArray(members)) {\n        return \"Array 'members' não encontrado ou não é um array.\";\n    }\n\n    // Encontra o membro cujo \"role.text\" seja \"Sócio-Administrador\"\n    const matchingMember = members.find(member => member.role?.text === \"Sócio-Administrador\");\n\n    // Verifica se encontrou um membro correspondente\n    if (matchingMember) {\n        // Pega o valor de \"text\" em \"role\" e \"age\" em \"person\"\n        const roleText = matchingMember.role?.text || \"Texto não encontrado\";\n        const personAge = matchingMember.person?.age || \"Idade não encontrada\";\n\n        // Retorna os valores concatenados em uma string\n        return `${personAge}`;\n    }\n\n    // Caso nenhum membro seja encontrado\n    return \"Nenhum membro com 'Sócio-Administrador' encontrado.\";\n})() }}"
            },
            {
              "fieldId": 3180847,
              "fieldValue": "={{ $json.founded }}"
            }
          ]
        }
      },
      "id": "b90d4ba6-3dcf-474d-ba72-ebbc59b8f74b",
      "name": "Create In CNPJ",
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        3360,
        -320
      ],
      "credentials": {
        "baserowApi": {
          "id": "p9yT8hD4cKqwhnNl",
          "name": "Baserow account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "amount": 8
      },
      "id": "05aa42dd-14b9-48a5-afee-942f8d9333d3",
      "name": "Timer CNPJa",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2560,
        -460
      ],
      "webhookId": "568a9dd4-2f76-478e-92fd-29feb8ed9c96"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e3050726-27eb-4f6b-ab9e-f603bb4ff5be",
              "leftValue": "={{ $json.company.name }}",
              "rightValue": 200,
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "091546dc-a6e9-447c-b17a-0974d6458d89",
      "name": "Filter1",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        3100,
        -460
      ]
    },
    {
      "parameters": {
        "url": "=https://api.cnpja.com/office/{{ $json.CNPJtoUpd }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "406292fa-55a7-4b5c-b2a3-bb9ba835adb1-18cf210a-7d99-4a1c-8276-8c711758285c"
            }
          ]
        },
        "options": {}
      },
      "id": "9c58e33f-6e48-45fa-9613-2c7278f2df82",
      "name": "GET CNPJa",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2820,
        -460
      ],
      "retryOnFail": true,
      "maxTries": 2,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "debd1d42-fae9-4335-a786-8a83008c67ee",
              "leftValue": "={{ $json.CNPJ }}",
              "rightValue": "0",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            },
            {
              "id": "5ccafb8e-da41-482f-b603-8b4bfdee3ea7",
              "leftValue": "={{ $json.CNPJ }}",
              "rightValue": "123456",
              "operator": {
                "type": "string",
                "operation": "notStartsWith"
              }
            },
            {
              "id": "af0853a6-99f0-4487-837d-84e354f29e1c",
              "leftValue": "={{ $json.CNPJ }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "3352e665-7835-462a-8779-60d576c1b85a",
      "name": "Filtra Erros",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        3100,
        -720
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b5cb67e2-712c-4959-9ce7-cced0976bb0f",
              "name": "CNPJtoUpd",
              "value": "={{ $json.CNPJ }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "ff2846c6-7575-46ad-9a23-23d10c7a4d8c",
      "name": "Separa o CNPJ",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3360,
        -720
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "Get Banco",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remove Duplicatas": {
      "main": [
        [
          {
            "node": "Filtra Erros",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTML": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Banco": {
      "main": [
        [
          {
            "node": "Remove Duplicatas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Timer CNPJa",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create In CNPJ": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Timer CNPJa": {
      "main": [
        [
          {
            "node": "GET CNPJa",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter1": {
      "main": [
        [
          {
            "node": "Create In CNPJ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GET CNPJa": {
      "main": [
        [
          {
            "node": "Filter1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filtra Erros": {
      "main": [
        [
          {
            "node": "Separa o CNPJ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Separa o CNPJ": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "cd84fcaf-9014-4068-a3db-33bf6b73e16e",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "cf4acdb3c7457e6de3ae1172242b5e019e60fdddde76cddf79e063bad216475c"
  },
  "id": "mZaH87idohiZkK1r",
  "tags": []
}